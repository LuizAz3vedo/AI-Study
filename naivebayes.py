# -*- coding: utf-8 -*-
"""NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgwNzAAZAXsyvvBWhN_58yB-MZe3msTb

# Naive Bayes

1. **Base Credit**: Utilizando o algoritmo Naive Bayes para prever o risco de disponibilidade de crédito com base em alguns parâmetros como histórico, dívida, etc.

2. **Base Census**: Utilizando o algoritmo Naive Bayes para prever se o salário de uma pessoa é menor ou maior que 50k com base em alguns parâmetros como nível educacional, classe trabalhadora, ocupação, etc.

Mostrou-se também que nem sempre o mesmo algoritmo é adequado para resolver qualquer problema existente e que pode ser mais eficaz para um problema específico.
"""

# Imports
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from yellowbrick.classifier import ConfusionMatrix

"""# Base Credit


"""

# Importando o arquivo.pkl
import pickle
with open('/content/credit.pkl', 'rb') as f:
  X_credit_treinamento, y_credit_treinamento, X_credit_teste, y_credit_teste = pickle.load(f)

naive_credit_data = GaussianNB()
naive_credit_data.fit(X_credit_treinamento, y_credit_treinamento)

previsoes = naive_credit_data.predict(X_credit_teste)

previsoes

y_credit_teste

accuracy_score(y_credit_teste, previsoes)

confusion_matrix(y_credit_teste, previsoes)

cm = ConfusionMatrix(naive_credit_data)
cm.fit(X_credit_treinamento, y_credit_treinamento)
cm.score(X_credit_teste, y_credit_teste)

print(classification_report(y_credit_teste, previsoes))

"""# Base Census

"""

with open('/content/census.pkl', 'rb') as f:
  X_census_treinamento, y_census_treinamento, X_census_teste, y_census_teste = pickle.load(f)

X_census_treinamento.shape, y_census_treinamento.shape

X_census_teste.shape, y_census_teste.shape

naive_census = GaussianNB()
naive_census.fit(X_census_treinamento, y_census_treinamento)
previsoes = naive_census.predict(X_census_teste)
previsoes

y_census_teste

accuracy_score(y_census_teste, previsoes) # Se não executar o escalonamento ele chega em proximo de 70%

cm = ConfusionMatrix(naive_census)
cm.fit(X_census_treinamento, y_census_treinamento)
cm.score(X_census_teste, y_census_teste)

print(classification_report(y_census_teste, previsoes))

